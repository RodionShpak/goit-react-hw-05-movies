{"version":3,"file":"static/js/786.020412d3.chunk.js","mappings":"oOAKMA,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAClBC,GAAYD,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IA8CvB,EA5CqB,WACnB,ICT8BE,EDS9B,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAcT,EAAaU,IAAI,UAAY,GAC3CC,EAAaC,UCfWd,EDeeE,EAAaU,IAAI,UCf1BG,MAAMD,SAASd,KAAOA,EAAI,IAAIA,GDeQ,IAEtEW,IAAgBN,GAAaC,EAAeK,GAC5CE,IAAeN,GAAYC,EAAcK,IAE7CG,EAAAA,EAAAA,YAAU,WACY,KAAhBX,EAAoBK,EAAY,CAAC,IAChCO,EAAAA,EAAAA,IAAc,CAAEC,MAAOb,EAAac,KAAMZ,IAAca,KAAKV,EACnE,GAAE,CAACL,EAAaE,IASjB,OAAKE,EAASY,eAUZC,SAASC,MAAT,sCAAgDlB,IAG9C,SAAC,EAAAmB,SAAD,CAAUC,UAAU,sCAApB,UACE,SAAC1B,EAAD,CAAWU,SAAUA,EAAUiB,MAAO,CAAEC,KAAK,iBAAD,OAAmBtB,GAAeuB,QAAS,UAb3FN,SAASC,MAAQ,6BAGf,UAAC,EAAAC,SAAD,CAAUC,UAAU,sCAApB,WACE,SAAC5B,EAAD,CAAYgC,gBAZD,SAAAC,GACd,OAADA,QAAC,IAADA,GAAAA,EAAGC,iBACH,IAAMC,EAAcC,OAAOH,EAAEI,cAAchB,MAAMiB,OAAOC,OAEpC,KAAhBJ,GAAoB7B,EAAgB,CAAEe,MAAOc,EAAab,KAAM,GACrE,IAQkC,KAApB,OAARV,QAAQ,IAARA,OAAA,EAAAA,EAAUY,iBAAuB,4CAYzC,C,mKEhDKgB,EAAU,mCACVC,EAAW,gCAGXC,EAAe,QAIfC,EAAY,SAAAC,GAAI,OAAIC,EAAAA,GAAAA,IAAUD,GAAMrB,MAAK,SAAAuB,GAAC,OAAIA,EAAEC,IAAN,GAA1B,EAETC,EAAqB,kBAAML,EAAU,GAAD,OAAIF,GAAJ,OAR3B,gBAQ2B,oBAAwCD,GAAvD,EACrBpB,EAAgB,SAAC,GAAD,QAAGC,MAAAA,OAAH,MAAW,WAAX,MAAuBC,KAAAA,OAAvB,MAA8B,EAA9B,SAAsCqB,EAAU,GAAD,OAAIF,GAAJ,OARxD,eAQwD,oBAAsCD,EAAtC,kBAAuDnB,EAAvD,iBAAqEC,GAApH,EAChB2B,EAAgB,SAAAC,GAAO,OAAIP,EAAU,GAAD,OAAIF,GAAJ,OAAeC,EAAf,YAA+BQ,EAA/B,oBAAkDV,GAA/D,EACvBW,EAAmB,SAAAD,GAAO,OAAIP,EAAU,GAAD,OAAIF,GAAJ,OAAeC,EAAf,YAA+BQ,EAA/B,YAR/B,UAQ+B,oBAAkEV,IAAWjB,MAAK,SAAAuB,GAAC,OAAIA,EAAEM,KAAKC,MAAM,EAAG,GAApB,GAAhG,EAC1BC,EAAmB,SAAAJ,GAAO,OAAIP,EAAU,GAAD,OAAIF,GAAJ,OAAeC,EAAf,YAA+BQ,EAA/B,YAR/B,UAQ+B,oBAAkEV,IAAWjB,MAAK,SAAAuB,GAAC,OAAIA,EAAES,QAAQF,MAAM,EAAG,GAAvB,GAAhG,C","sources":["components/Movies/Movies.jsx","utils/isPositiveNumber.js","utils/fetchFilms.js"],"sourcesContent":["import { lazy, Suspense, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchFilmList } from 'utils/fetchFilms';\nimport { isPositiveNumber } from 'utils/isPositiveNumber';\n\nconst SearchForm = lazy(() => import('components/SearchForm/SearchForm'));\nconst MovieList = lazy(() => import('components/MovieList/MovieList'));\n\nconst SearchMovies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchPage, setSearchPage] = useState(1);\n  const [filmList, setFilmList] = useState([]);\n\n  const paramsQuery = searchParams.get('query') || '';\n  const paramsPage = parseInt(isPositiveNumber(searchParams.get('page')) || 1);\n\n  if (paramsQuery !== searchQuery) setSearchQuery(paramsQuery);\n  if (paramsPage !== searchPage) setSearchPage(paramsPage);\n\n  useEffect(() => {\n    if (searchQuery === '') setFilmList({});\n    else fetchFilmList({ query: searchQuery, page: searchPage }).then(setFilmList);\n  }, [searchQuery, searchPage]);\n\n  const onSubmit = e => {\n    e?.preventDefault();\n    const searchValue = String(e.currentTarget.query.value).trim();\n\n    if (searchValue !== '') setSearchParams({ query: searchValue, page: 1 });\n  };\n\n  if (!filmList.total_results) {\n    document.title = 'React HW05 - Movie search';\n\n    return (\n      <Suspense fallback={<p>Loading...</p>}>\n        <SearchForm onSubmitHandler={onSubmit} />\n        {filmList?.total_results === 0 && <p>Nothing found</p>}\n      </Suspense>\n    );\n  } else {\n    document.title = `React HW05 - Movie search - ${searchQuery}`;\n\n    return (\n      <Suspense fallback={<p>Loading...</p>}>\n        <MovieList filmList={filmList} state={{ from: `/movies?query=${searchQuery}`, addPath: '' }} />\n      </Suspense>\n    );\n  }\n};\n\nexport default SearchMovies;\n","export const isPositiveNumber = n => !isNaN(parseInt(n)) || n > 0 ? n : false;\n","import axios from 'axios';\n\nconst API_KEY = 'ad24807293275bef83ede161311e71e0';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst PATH_TRENDING = 'movie/popular'; // - список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nconst PATH_SEARCH = 'search/movie'; // - пошук фільму за ключовим словом на сторінці фільмів.\nconst PATH_DETAILS = 'movie'; // - запит повної інформації про фільм для сторінки кінофільму.\nconst PATH_CREDITS = 'credits'; // - запит інформації про акторський склад для сторінки кінофільму.\nconst PATH_REVIEWS = 'reviews'; // - запит оглядів для сторінки кінофільму.\n\nconst fetchPath = path => axios.get(path).then(r => r.data);\n\nexport const fetchTrendingFilms = () => fetchPath(`${BASE_URL}${PATH_TRENDING}?api_key=${API_KEY}`);\nexport const fetchFilmList = ({ query = 'trending', page = 1 }) => fetchPath(`${BASE_URL}${PATH_SEARCH}?api_key=${API_KEY}&query=${query}&page=${page}`);\nexport const fetchFilmData = movieId => fetchPath(`${BASE_URL}${PATH_DETAILS}/${movieId}?api_key=${API_KEY}`);\nexport const fetchFilmCredits = movieId => fetchPath(`${BASE_URL}${PATH_DETAILS}/${movieId}/${PATH_CREDITS}?api_key=${API_KEY}`).then(r => r.cast.slice(0, 10));\nexport const fetchFilmReviews = movieId => fetchPath(`${BASE_URL}${PATH_DETAILS}/${movieId}/${PATH_REVIEWS}?api_key=${API_KEY}`).then(r => r.results.slice(0, 10));\n"],"names":["SearchForm","lazy","MovieList","n","useSearchParams","searchParams","setSearchParams","useState","searchQuery","setSearchQuery","searchPage","setSearchPage","filmList","setFilmList","paramsQuery","get","paramsPage","parseInt","isNaN","useEffect","fetchFilmList","query","page","then","total_results","document","title","Suspense","fallback","state","from","addPath","onSubmitHandler","e","preventDefault","searchValue","String","currentTarget","value","trim","API_KEY","BASE_URL","PATH_DETAILS","fetchPath","path","axios","r","data","fetchTrendingFilms","fetchFilmData","movieId","fetchFilmCredits","cast","slice","fetchFilmReviews","results"],"sourceRoot":""}